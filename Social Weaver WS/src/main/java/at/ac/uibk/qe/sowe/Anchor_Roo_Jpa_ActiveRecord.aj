// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package at.ac.uibk.qe.sowe;

import at.ac.uibk.qe.sowe.Anchor;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Anchor_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Anchor.entityManager;
    
    public static final EntityManager Anchor.entityManager() {
        EntityManager em = new Anchor().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Anchor.countAnchors() {
        return entityManager().createQuery("SELECT COUNT(*) FROM Anchor o", Long.class).getSingleResult();
    }
    
    public static List<Anchor> Anchor.findAllAnchors() {
        return entityManager().createQuery("SELECT o FROM Anchor o", Anchor.class).getResultList();
    }
    
    public static Anchor Anchor.findAnchor(Long id) {
        if (id == null) return null;
        return entityManager().find(Anchor.class, id);
    }
    
    public static List<Anchor> Anchor.findAnchorEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Anchor o", Anchor.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Anchor.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Anchor attached = Anchor.findAnchor(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Anchor.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Anchor.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Anchor Anchor.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Anchor merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
